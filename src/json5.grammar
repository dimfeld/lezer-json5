// This grammar draws heavily on these two sources:
// The Lezer Javascript grammar at https://github.com/lezer-parser/javascript
// The Tree-Sitter JSON5 grammar at https://github.com/Joakker/tree-sitter-json5

@top File { value }

value {
  Object |
  Array |
  Number |
  String |
  null |
  True |
  False
}

Object {
  "{" (Member ("," Member)* ","?)? "}"
}

Member {
  PropertyName PropertyColon value
}

String { string }

PropertyName { string | identifier }

Array {
  "[" (value ("," value)* ","?)? "]"
}

@skip { LineComment | BlockComment | spaces | newline }

@tokens {
  spaces[@export] { $[\u0009 \u000b\u000c\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }

  newline[@export] { $[\r\n\u2028\u2029] }

  null[@export] { "null" }
  True { "true" }
  False { "false" }

  PropertyColon { ":" }

  LineComment { "//" ![\r\n\u2028\u2029]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  identifier {
    identifierChar (identifierChar | std.digit)*
  }

  @precedence { spaces, newline, identifier }

  string {
    "\"" ("\\" ("\"" | escapableChar | newline) | !["\\])* "\"" |
    "'" ("\\" ("'" | escapableChar | newline) | !['\\])* "'"
  }

  escapableChar {
    $[\\bfnrtv]
  }

  Number {
    (
      $[+-]?
      (
        "0" $[xX] $[0-9a-fA-F]+ |
        ("0" | $[1-9] $[0-9]*) "." $[0-9]* ($[eE] $[+-]? $[0-9]+)? |
        "." $[0-9]* ($[eE] $[+-]? $[0-9]+)? |
        ("0" | $[1-9] $[0-9]*) ($[eE] $[+-]? $[0-9]+)? |
        "Infinity"
      )
    ) | "NaN"
  }
}
